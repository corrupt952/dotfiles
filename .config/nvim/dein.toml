#
# Overhaul
#
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'

[[plugins]]
repo = 'osyo-manga/vim-over'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap ub     :Denite buffer<CR>
nnoremap uf     :Denite file_mru<CR>
'''
hook_post_source = '''
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
'''

#
# Completion
#
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_diagnostics_enabled = 0
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_text_edit_enabled = 0
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}

" https://github.com/prabirshrestha/vim-lsp/wiki/Servers-Docker
if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif
if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif
if executable('terraform-lsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'terraform-lsp',
        \ 'cmd': {server_info->['terraform-lsp']},
        \ 'whitelist': ['terraform','tf'],
        \ })
endif
if executable('docker-langserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['Dockerfile'],
        \ })
endif
if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif
'''

# FIXME: 思ったように動かない
# [[plguins]]
# repo = 'mattn/vim-lsp-settings'

#
# Interface
#
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\   'active': {
\       'left': [ [ 'mode', 'paste' ],
\               [ 'readonly', 'filepath', 'lineinfo' ] ],
\       'right': [ ['percent' ],
\                  [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
\   },
\   'component_function': {
\       'filepath': 'Filepath'
\   }
\}
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_enabled = 1
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 0
let g:gitgutter_map_keys = 0
let g:gitgutter_sign_added = '.'
let g:gitgutter_sign_modified = '.'
let g:gitgutter_sign_removed = '.'
let g:gitgutter_sign_removed_first_line = '.'
let g:gitgutter_sign_modified_removed = '.'

nnoremap gs :GitGutterToggle<CR>
nnoremap gn :GitGutterNextHunk<CR>
nnoremap gb :GitGutterPrevHunk<CR>
'''

#
# Colorscheme
#
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
let g:hybrid_use_iTerm_colors = 1
'''

#
# Formatter
#
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <Enter> <Plug>(EasyAlign)
'''

#
# Support tools
#
[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
let g:switch_mapping = ""

nnoremap <SPACE><SPACE> :<C-u>Switch<CR>
'''

[[plugins]]
repo = 'syui/airsave.vim'
hook_add = '''
let g:auto_write = 1
'''

#
# Others
#
[[plugins]]
repo = 'Shougo/vinarise.vim'
