#!/usr/bin/env ruby

require 'fileutils'

GIT_CMD = 'command git'
GIT_CONFIG_DIR_PATH = File.join(Dir.home, '.config', 'git')
GIT_REPO_GROUP_PATH = File.join(Dir.home, 'Repo')

# Get user configurations
def env
  system 'echo "user: $(git config --get user.name)"'
  system 'echo "email: $(git config --get user.email)"'
end

# Create group dir for git repositories
def make_repo_group_dir(repo_name)
  # Create group dir
  repo_group_path = File.join(GIT_REPO_GROUP_PATH, repo_name)
  FileUtils.mkdir_p(repo_group_path)

  # Add config
  repo_group_config_path = File.join(GIT_CONFIG_DIR_PATH, repo_name)
  unless File.exist?(repo_group_config_path)
    File.open(repo_group_config_path, 'a') do |f|
      f.write <<-EOF
[user]
  name =
  email =
      EOF
    end
  end

  # Add includeIf
  local_config_path = File.join(GIT_CONFIG_DIR_PATH, 'local')
  unless File.readlines(local_config_path).grep(/#{repo_name}/).size > 0
    File.open(local_config_path, 'a') do |f|
      f.write <<-EOS
  [includeIf "gitdir:#{repo_group_path}/"]
    path = #{repo_group_config_path}
      EOS
    end
  end

  # add .ssh and configuration
  ssh_config_path = File.join(repo_group_path, '.ssh')
  unless File.exist?(ssh_config_path)
    FileUtils.mkdir ssh_config_path, mode: 0700
    FileUtils.touch File.join(ssh_config_path, 'config')
    FileUtils.chmod File.join(ssh_config_path, 'config'), 0600
  end

  # add .git_ssh.sh
  git_ssh_path = File.join(repo_group_path, '.git_ssh.sh')
  unless File.exist?(git_ssh_path)
    File.open(git_ssh_path, 'w', 0755) do |f|
      f.write <<-EOF
#!/bin/sh
# ssh-wrapper "\$@"
      EOF
    end
  end

  # add .envrc
  envrc_path = File.join(repo_group_path, '.envrc')
  unless File.exist?(envrc_path)
    File.open(envrc_path, 'w') do |f|
      f.write <<-EOF
CURRENT_PATH=#{repo_group_path}
export SSH_CONFIG=\${CURRENT_PATH}/.ssh/config
export GIT_SSH=\${CURRENT_PATH}/.git_ssh.sh
      EOF
    end
  end
end

# main method
if __FILE__ == $0
  # TODO: 適当過ぎるのでもう少しいい感じに
  if ARGV.join(' ') =~ /force/
    STDERR.puts "Don't use force options!!!"
    exit 1
  end

  case ARGV[0]
  when 'fmerge'
    system 'branches=$(git branch -a) \
            && branch=$(echo "${branches}" | fzf +m) \
            && git merge $(echo "$branch" | sed "s/.* //" | sed "s#remotes/##")'
  when 'env'
    env
  when 'mkparentdir'
    if ARGV&.length == 2
      make_repo_group_dir ARGV[1]
    else
      STDERR.puts 'too many arguments or less'
      exit 1
    end
  else
    system [GIT_CMD, *ARGV].join(' ')
  end
end
